#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Start docker-compose services
echo -e "${GREEN}Starting Docker services...${NC}"
docker-compose up -d

# Wait for n8n to be ready
echo -e "${YELLOW}Waiting for n8n to start...${NC}"
until curl -s http://localhost:5678/healthz > /dev/null 2>&1; do
    printf '.'
    sleep 2
done
echo -e "\n${GREEN}n8n is ready!${NC}"

# Function to get ngrok URL
get_ngrok_url() {
    local attempts=0
    local max_attempts=10
    local ngrok_url=""
    
    while [ $attempts -lt $max_attempts ]; do
        # Method 1: Try ngrok API v2
        ngrok_url=$(curl -s http://localhost:4040/api/tunnels 2>/dev/null | \
            grep -o '"public_url":"https://[^"]*' | \
            grep -o 'https://[^"]*' | \
            head -1)
        
        # Method 2: If v2 fails, try parsing differently
        if [ -z "$ngrok_url" ]; then
            ngrok_url=$(curl -s http://127.0.0.1:4040/api/tunnels 2>/dev/null | \
                python3 -c "import sys, json; data = json.load(sys.stdin); print(data['tunnels'][0]['public_url'])" 2>/dev/null || echo "")
        fi
        
        # Method 3: Try using jq if available
        if [ -z "$ngrok_url" ] && command -v jq &> /dev/null; then
            ngrok_url=$(curl -s http://localhost:4040/api/tunnels 2>/dev/null | \
                jq -r '.tunnels[0].public_url' 2>/dev/null || echo "")
        fi
        
        if [ ! -z "$ngrok_url" ]; then
            echo "$ngrok_url"
            return 0
        fi
        
        attempts=$((attempts + 1))
        sleep 2
    done
    
    return 1
}

# Check if ngrok is installed
if ! command -v ngrok &> /dev/null; then
    echo -e "${RED}ngrok is not installed!${NC}"
    echo "Please install ngrok first:"
    echo "  brew install ngrok/ngrok/ngrok  # macOS"
    echo "  snap install ngrok              # Ubuntu"
    echo "  or download from https://ngrok.com/download"
    exit 1
fi

# Start ngrok with proper configuration
echo -e "${YELLOW}Starting ngrok...${NC}"

# Kill any existing ngrok processes
pkill -f ngrok || true
sleep 1

# Start ngrok in background
ngrok http 5678 > /dev/null 2>&1 &
NGROK_PID=$!

# Give ngrok time to start and establish tunnel
echo -e "${YELLOW}Waiting for ngrok tunnel...${NC}"
sleep 3

# Get ngrok URL
NGROK_URL=$(get_ngrok_url)

if [ -z "$NGROK_URL" ]; then
    echo -e "${RED}Failed to get ngrok URL${NC}"
    echo -e "${YELLOW}Trying alternative method...${NC}"
    
    # Alternative: Check ngrok output directly
    ngrok_output=$(timeout 5 ngrok http 5678 2>&1 | grep -o 'https://[a-zA-Z0-9]*\.ngrok\.io' | head -1)
    
    if [ ! -z "$ngrok_output" ]; then
        NGROK_URL=$ngrok_output
    else
        echo -e "${RED}Could not establish ngrok tunnel${NC}"
        echo "Please check:"
        echo "1. Is ngrok authenticated? Run: ngrok config add-authtoken YOUR_AUTH_TOKEN"
        echo "2. Check ngrok status at: http://localhost:4040"
        echo "3. Try running manually: ngrok http 5678"
        
        # Keep services running even without ngrok
        echo -e "\n${YELLOW}Services are still running locally:${NC}"
        echo "n8n: http://localhost:5678"
        echo "WAHA: http://localhost:3000"
        read -p "Press Enter to stop services..."
        docker-compose down
        exit 1
    fi
fi

# Update docker environment with ngrok URL
export WEBHOOK_URL="${NGROK_URL}"
export N8N_EDITOR_BASE_URL="${NGROK_URL}"

# Update WAHA webhook URL to use ngrok
docker-compose exec -T waha sh -c "export WHATSAPP_HOOK_URL=${NGROK_URL}/webhook/whatsapp" 2>/dev/null || true

# Display success information
clear
echo -e "${GREEN}================================================${NC}"
echo -e "${GREEN}All services are running!${NC}"
echo -e "${GREEN}================================================${NC}"
echo ""
echo -e "📦 ${YELLOW}n8n (local):${NC} http://localhost:5678"
echo -e "🌐 ${YELLOW}n8n (public):${NC} ${NGROK_URL}"
echo -e "📱 ${YELLOW}WAHA API:${NC} http://localhost:3000/api/docs"
echo -e "🗄️  ${YELLOW}PostgreSQL:${NC} localhost:5432"
echo -e "⚡ ${YELLOW}Redis:${NC} localhost:6379"
echo ""
echo -e "${GREEN}Webhook URLs:${NC}"
echo -e "  n8n webhooks: ${NGROK_URL}/webhook/*"
echo -e "  Test webhook: ${NGROK_URL}/webhook-test/*"
echo ""
echo -e "${YELLOW}Login credentials:${NC}"
echo -e "  Username: ${N8N_BASIC_AUTH_USER:-admin}"
echo -e "  Password: ${N8N_BASIC_AUTH_PASSWORD:-password}"
echo ""
echo -e "${RED}Press Ctrl+C to stop all services${NC}"

# Function to cleanup on exit
cleanup() {
    echo -e "\n${YELLOW}Stopping services...${NC}"
    kill $NGROK_PID 2>/dev/null || true
    docker-compose down
    echo -e "${GREEN}All services stopped${NC}"
}

trap cleanup EXIT

# Keep script running
while true; do
    sleep 1
done
